{"version":3,"sources":["components/Form.js","components/Jot.js","components/Jotlist.js","components/Sidebar.js","App.js","reportWebVitals.js","index.js"],"names":["Form","activeJot","onUpdateNote","addDate","setActiveAddBtn","title","text","onEditField","key","value","Date","className","type","id","onChange","e","target","placeholder","name","cols","rows","Jot","jot","toggleActiveJot","removeJot","onClick","console","log","clickHandler","length","substring","dateModified","icon","faEllipsisV","Jotlist","jotsArray","sortByDate","sort","a","b","fullModifiedDate","map","Sidebar","addJot","activeAddBtn","href","style","color","faPlusCircle","App","useState","setJotsArray","counter","setCounter","setActiveJot","date","getDate","parseInt","getMonth","getFullYear","getHours","getMinutes","filter","newJot","findIndex","getIndex","find","updatedNote","updatedNotesArr","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e5ad4ea.chunk.js","sourcesContent":["import React from 'react'\nimport { useState } from \"react\";\n\nconst Form = ({activeJot, onUpdateNote, addDate, setActiveAddBtn}) => {\n\n    if (!activeJot) {\n        setActiveAddBtn(true)\n        return <div>No Active Note</div>;\n\n    } \n\n    if (!activeJot.title && !activeJot.text) {\n        setActiveAddBtn(false)\n    }\n\n    else {\n        setActiveAddBtn(true)\n    }\n\n    const onEditField = (key, value) => {\n        onUpdateNote({\n          ...activeJot,\n          [key]: value,\n          dateModified: addDate(),\n          fullModifiedDate: new Date()\n        });\n\n    }; \n\n    return (\n        <div className=\"form\">\n            <input className='form-title' type=\"text\" id=\"title\" value={activeJot.title} onChange={(e) => onEditField('title', e.target.value)} placeholder=\"New Jot\" />\n            <textarea className='form-text' name=\"\" id=\"body\" cols=\"30\" rows=\"10\" value={activeJot.text} onChange={(e) => onEditField('text', e.target.value)} placeholder=\"Write a Jot\"></textarea>\n        </div>\n    )\n}\n\nexport default Form\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEllipsisV } from '@fortawesome/free-solid-svg-icons';\n\nconst Jot = ({jot, toggleActiveJot, activeJot, removeJot}) => {\n\n    const showTitle = () => {\n        if(jot.title.length < 16){\n            return jot.title\n        }\n        else {\n            return jot.title.substring(0, 16) + '...'\n        }\n    }\n\n    const clickHandler = (e) => {\n        console.log(e.target.className)\n        if(e.target.className === 'jot') {\n            toggleActiveJot(jot.id)\n        }\n        if(e.target.className === 'remove-btn remove-btn-active') {\n            removeJot(jot.id)\n        }\n    }\n\n    return (\n        <>\n            <div onClick={(e) => clickHandler(e)}  className={activeJot === jot.id ? 'jot active': 'jot'}><div className='jot-title'>{!jot.title ? 'New Jot' : showTitle()}</div><div className='jot-date'>{jot.dateModified}</div> <button className={activeJot === jot.id ? 'remove-btn remove-btn-active': 'remove-btn'}><FontAwesomeIcon icon={faEllipsisV}  className='font-ellipsis'/></button>\n            </div>\n        </>\n    )\n}\n\nexport default Jot\n","import React from 'react';\nimport Jot from './Jot.js';\n\n//https://stackoverflow.com/questions/43572436/sort-an-array-of-objects-in-react-and-render-them\n\n\nconst Jotlist = ({jotsArray, activeJot, toggleActiveJot, removeJot, sortByDate}) => {\n\n    const sortArr = () => {\n        jotsArray.sort((a, b) => b.fullModifiedDate - a.fullModifiedDate)\n        //jotsArray.sort((a, b) => new Date(...b.dateModified.split('/')) -  new Date(...a.dateModified.split('/')))\n        return jotsArray\n    }\n    \n    return (\n        <div className='jot-list'> \n            {sortArr().map((jot) => <Jot key={jot.id} jot={jot} toggleActiveJot={toggleActiveJot} removeJot={removeJot} activeJot={activeJot}/>)}\n        </div>\n    )\n}\n\nexport default Jotlist\n","import React from 'react';\nimport Jotlist from './Jotlist.js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\n\nconst Sidebar = ({jotsArray, activeJot, toggleActiveJot, addJot, removeJot, activeAddBtn, sortByDate}) => {\n    return (\n        <div className=\"sidebar\">\n            <a href=\"index.html\"><h1 className='title'>Jotpad</h1></a>\n            <Jotlist jotsArray={jotsArray} activeJot={activeJot} toggleActiveJot={toggleActiveJot} removeJot={removeJot} />\n            <button className='add-btn' onClick={addJot} style={ !activeAddBtn ?{color: 'rgba(255, 255, 255, 0.507)'} : {color: ''} }>Add a Jot <FontAwesomeIcon className='font-plus' icon={faPlusCircle} /></button>\n        </div>\n    )\n}\n\nexport default Sidebar\n","import React, { useState } from \"react\";\nimport './App.css';\nimport Header from './components/Header.js'\nimport Form from './components/Form.js'\nimport Sidebar from './components/Sidebar.js'\n\nfunction App() {\n  const [jotsArray, setJotsArray] = useState([\n    {id: 0, title: \"title1\", text: \"text\", dateModified: \"01/01/2021\", fullModifiedDate: new Date()},\n    {id: 1, title: \"title2\", text: \"text\", dateModified: \"03/03/2021\", fullModifiedDate: new Date()},\n    {id: 2, title: \"title3\", text: \"text\", dateModified: \"02/02/2021\", fullModifiedDate: new Date()}\n  ])\n\n  const [counter, setCounter] = useState(jotsArray.length +1)\n\n  const [activeJot, setActiveJot] = useState(0)\n\n  const [activeAddBtn, setActiveAddBtn] = useState(true)\n\n  const addJot = () => {\n    if(activeAddBtn === true){\n      const id = counter;\n      const newJot = {id, title: \"\", text: \"\", dateModified: addDate(), fullModifiedDate: new Date()};\n      setJotsArray(jotsArray => [...jotsArray, newJot]);\n      setActiveJot(newJot.id);\n      setCounter(counter +1);\n    }\n  }\n\n  const toggleActiveJot = (id) => {\n    setJotsArray(jotsArray.filter((jot)=>(jot.title || jot.text)))\n    setActiveJot(id)\n    console.log(counter)\n\n  }\n\n  const addDate = () => {\n    //https://stackoverflow.com/questions/22850929/most-efficient-way-to-get-the-dates-for-the-past-7-days\n    const date = new Date();\n    return date.getDate() + \"/\" + parseInt(date.getMonth()+1) + \"/\" + date.getFullYear() + \" \" + date.getHours() + \":\" + date.getMinutes();\n  }\n\n  const removeJot = (id) => {\n    function getIndex(id) {\n      return jotsArray.findIndex(jot => jot.id === id);\n    };\n    function activeJotConditions() {\n\n      if(id === jotsArray[0].id) {\n        return jotsArray[1].id\n      }\n\n      if(id !== jotsArray[0].id) {\n        return jotsArray[getIndex(id)-1].id\n      }\n    }\n    setJotsArray(jotsArray.filter((jot)=>(jot.id !== id)));\n\n    setActiveJot( activeJotConditions() );\n    console.log(jotsArray)\n\n  }\n\n  const onUpdateNote = (updatedNote) => {\n    const updatedNotesArr = jotsArray.map((jot) => {\n      if (jot.id === updatedNote.id) {\n        return updatedNote;\n      }\n      return jot;\n    });\n\n    setJotsArray(updatedNotesArr);\n  };\n\n  const getActiveNote = () => {\n    return jotsArray.find(({id}) => id === activeJot);\n\n  };\n\n  /*\n  const sortByDate = () => {\n    const sorted = jotsArray.sort((a, b) => {\n      return new Date(...b.dateModified.split('/').reverse()) - new Date(...a.dateModified.split('/').reverse())\n    });\n    setActiveJot(sorted);\n\n  };\n  */\n\n  return (\n    <div className=\"App\">\n      <div className=\"app-body\">\n        <Sidebar jotsArray={jotsArray} activeJot={activeJot} toggleActiveJot={toggleActiveJot} addJot={addJot} removeJot={removeJot} activeAddBtn={activeAddBtn} />\n        <Form activeJot={getActiveNote()} onUpdateNote={onUpdateNote} addDate={addDate} setActiveAddBtn={setActiveAddBtn}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}